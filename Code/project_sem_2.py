# -*- coding: utf-8 -*-
"""Project Sem 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FJrIIfJV5c0puhjr3nMg0XJxYfOqoY12

# AIR QUAILITY PREDICTION USING LINEAR REGRESSION

# DATA SET SELECTION AND IMPORTING FUNCTIONS

IMPORTING THE REQUIRED LIBRARIES AND FUNCTIONS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
import seaborn as sns
rcParams['figure.figsize']=10,8
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import mean_squared_error

"""Now were going to read the dataset provided by uci machine learning repository on air quality index

Reading the dataset
"""

df = pd.read_excel("AirQualityUCI.xlsx")

"""# DATA SET ANALYSIS

Now showing a sample of the contents in the dataset provided by uci machine learning repository
"""

df.head()

"""Finding out the shape of the dataset"""

df.shape

"""Observing the mean of the dataset"""

df.mean()

"""Observing the standard deviation of the dataset"""

df.std()

"""Getting the information regarding all the attributes of the dataset"""

df.info()

"""checking for null rows and interpreting the dependent feature"""

df.count()

df.isnull().any()

df.RH.value_counts()

df['RH'].unique()

"""Drawing a pairplot"""

sns.pairplot(df)

"""# DATA PREPROCESSING"""

df = df.drop(['Time','Date'],axis = 1)

#checking the relationship between all the features with the target (Quality)
'''zeromask = np.zeros_like(df.corr()) #creates an array of zeros
triangle_indices = np.triu_indices_from(zeromask)
zeromask[triangle_indices] = True'''

plt.figure(figsize=(20,20))
sns.heatmap(df.corr(),annot=True, annot_kws={'size': 13},cmap='viridis')
sns.set_style('whitegrid')
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)

plt.show()

"""# MODEL SELECTION AND METHODOLOGY"""

lm=LinearRegression()

"""## INITIAL 10 MODELS"""

y= df['RH']
out_put1_error =[]
out_put1_accuracy = []
for i in [ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']:
  x1 = df[[i]]
  x_train,x_test,y_train,y_test=train_test_split(x1,y,test_size=0.33, random_state=42)
  lm.fit(x_train,y_train)
  prediction = lm.predict(x_test)
  print()
  print("The root mean squared error when ",i," is used as an idependent variable is ", np.sqrt(mean_squared_error(y_test,prediction)))
  out_put1_error.append(np.sqrt(mean_squared_error(y_test,prediction)))
  print('accuracy of your prediction when',i,"is used as a independent variable for  prediction is ",end=' ')
  print(r2_score(y_test,prediction)*100,end='')
  print('%')
  out_put1_accuracy.append(r2_score(y_test,prediction)*100)

sns.set(rc={'figure.figsize':(15,10)})
sns.set_style('ticks')
sns.set(font_scale = 1)
x = [ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']
y = out_put1_error
o = sns.barplot(x,y)
o.set_xlabel(" MSE VALUE  ")
o.set_ylabel(" Independent variables ")
o.set_title("MSE Variation")
plt.show()
sns.set_style('ticks')
sns.set(font_scale = 1)
x = [ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']
y = out_put1_accuracy
o = sns.barplot(x,y)
o.set_xlabel(" Accuracy  ")
o.set_ylabel(" Independent variables ")
o.set_title("Accuracy variation")
plt.show()

"""## NEXT 9 MODELS"""

x2= [ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']
input1=[]
out_put_2_error=[]
out_put_2_accuracy =[]
for i in range(len(x2)-2+1):
  input1.append("set "+str(i+1))
  x21 = df[[x2[i],x2[i+1]]]
  y=df['RH']
  x_train,x_test,y_train,y_test=train_test_split(x21,y,test_size=0.33, random_state=42)
  lm.fit(x_train,y_train)
  prediction = lm.predict(x_test)
  print("The rms value of error when ",x2[i],x2[i+1]," are taken as the independent variables is ",np.sqrt(mean_squared_error(y_test,prediction)))
  print("The accuracy of prediction when ",x2[i],",",x2[i+1]," are taken as the independent variables is",end=" ")
  print(r2_score(y_test,prediction)*100,end='')
  print('%')
  out_put_2_error.append(np.sqrt(mean_squared_error(y_test,prediction)))
  out_put_2_accuracy.append(r2_score(y_test,prediction)*100)
  print()

sns.set(rc={'figure.figsize':(15,10)})
sns.set_style('ticks')
sns.set(font_scale = 1)
y = out_put_2_error
o = sns.barplot(input1,y)
o.set_xlabel(" Set of independent variables o  ")
o.set_ylabel(" MSE Values ")
o.set_title("sets of 2 independent variables are taken")
plt.show()
sns.set_style('ticks')
sns.set(font_scale = 1)
y = out_put_2_accuracy
o = sns.barplot(input1,y)
o.set_xlabel("sets of 2 independent variables are taken")
o.set_ylabel("Accuracy")
o.set_title("Accuracy variation when 2 independent variables are taken")
plt.show()

"""## NEXT 8 MODELS"""

x2= [ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']
input1=[]
out_put3_MSE = []
out_put3_Accuracy=[]
for i in range(len(x2)-3+1):
  input1.append("set "+str(i+1))
  x21 = df[[x2[i],x2[i+1],x2[i+2]]]
  y=df['RH']
  x_train,x_test,y_train,y_test=train_test_split(x21,y,test_size=0.33, random_state=42)
  lm.fit(x_train,y_train)
  prediction = lm.predict(x_test)
  print("The rms value of error when ",x2[i],",",x2[i+1],",",x2[i+2]," are taken as the independent variables is ",np.sqrt(mean_squared_error(y_test,prediction)))
  print("The accuracy of prediction when ",x2[i],",",x2[i+1],",",x2[i+2]," are taken as the independent variables is",end=" ")
  print(r2_score(y_test,prediction)*100,end='')
  print('%')
  print()
  out_put3_MSE.append(np.sqrt(mean_squared_error(y_test,prediction)))
  out_put3_Accuracy.append(r2_score(y_test,prediction))

sns.set(rc={'figure.figsize':(15,10)})
sns.set_style('ticks')
sns.set(font_scale = 1)
y=out_put3_MSE
x=input1
o=sns.barplot(x,y)
o.set_xlabel(" Set of independent variables taken 3 at a time ")
o.set_ylabel(" MSE Values ")
o.set_title("Variation of MSE when 3 independent variables are taken at a time")
plt.show()

y = out_put3_Accuracy
o = sns.barplot(x,y)
o.set_xlabel(" Set of independent variables taken 3 at a time")
o.set_ylabel("Accuracy")
o.set_title("Variation of Accuracy when 3 independent variables are taken at a time")

"""## MODEL WITH EVERY INDEPENDENT FEATURES"""

x=df[[ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']]
y=df['RH']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33, random_state=42)
lm.fit(x_train,y_train)
prediction = lm.predict(x_test)
print("The RMS error when every independent variables are used for prediction is ",np.sqrt(mean_squared_error(y_test,prediction)))
print('accuracy of your prediction whwn every independent variable is considered for prediction is',end=' ')
print(r2_score(y_test,prediction)*100,end='')
print('%')

sns.set(rc={'figure.figsize':(11,7)})
sns.set_style('ticks')
sns.set(font_scale = 1)
y=[np.sqrt(mean_squared_error(y_test,prediction)),r2_score(y_test,prediction)*100]
x = ['MSE','Accuracy']
o=sns.barplot(x,y)
o.set_title("MSE and Accuracy of the model")
plt.show()

"""## POLYNOMIAL REGRESSION OF DEGREE 2"""

x=df[[ 'CO(GT)','C6H6(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','PT08.S5(O3)','T','AH']]
poly_accuracy=[]
poly_MSE=[]
degree1=[]
y=df['RH']
from sklearn.preprocessing import PolynomialFeatures
poly_function = PolynomialFeatures(degree=2)
poly_features = poly_function.fit_transform(x)
x_train,x_test,y_train,y_test=train_test_split(poly_features,y,test_size=0.33, random_state=42)
lm.fit(x_train,y_train)
print("The RMS error when every independent variables are used for prediction is ",np.sqrt(mean_squared_error(y_test,prediction)))
print('accuracy of your prediction whwn every independent variable is considered for prediction is',end=' ')
print(r2_score(y_test,prediction)*100,end='')
print('%')
print()

sns.set(rc={'figure.figsize':(11,7)})
sns.set_style('ticks')
sns.set(font_scale = 1)
y=[np.sqrt(mean_squared_error(y_test,prediction)),r2_score(y_test,prediction)*100]
x = ['MSE','Accuracy']
o=sns.barplot(x,y)
o.set_title("MSE and Accuracy of the model")
plt.show()

